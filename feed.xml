<?xml version="1.0" encoding="UTF-8"?>

<rss version="2.0"
  xmlns:content="http://purl.org/rss/1.0/modules/content/"
  xmlns:dc="http://purl.org/dc/elements/1.1/"
  xmlns:media="http://search.yahoo.com/mrss/"
  xmlns:atom="http://www.w3.org/2005/Atom"
  xmlns:georss="http://www.georss.org/georss">

  <channel>
    <title>
      <![CDATA[  phunc20  ]]>
    </title>
    <link> https://phunc20.github.io </link>
    <description>
      <![CDATA[  maths et bêtises  ]]>
    </description>
    <atom:link
      href="https://phunc20.github.io/feed.xml"
      rel="self"
      type="application/rss+xml" />


<item>
  <title>
    <![CDATA[  Asian Family Names  ]]>
  </title>
  <link> https://phunc20.github.io/culture/my/asian_family_names/index.html </link>
  <guid> https://phunc20.github.io/culture/my/asian_family_names/index.html </guid>
  <description>
    <![CDATA[  Ng in Hong Kong and in Malaysia  ]]>
  </description>  
  
  <content:encoded>
    <![CDATA[  <h1 id="asian_family_names">Asian Family Names</h1>
<h2 id="ng">Ng</h2>
<p>在今晚消遣的時段, 我看了 <a href="https://www.youtube.com/watch?v&#61;zePOiy0anKA">一個 YouTube 影片</a>, 裏頭寫着 Uncle Roger 的真名叫做 Nigel <strong>Ng</strong> &#40;<strong>黃</strong>瑾瑜&#41;. 對於台灣, 香港和越南文化比較熟的我, 這一幕當下是有點吃驚的.</p>
<p>吃驚的點在於, 就我先前的認知, 比如說</p>
<ul>
<li><p><a href="https://en.wikipedia.org/wiki/Ng&#37;C3&#37;B4_B&#37;E1&#37;BA&#37;A3o_Ch&#37;C3&#37;A2u"><strong>Ngô</strong> Bảo Châu</a> &#61; <strong>吳</strong>寶珠</p>
</li>
<li><p><a href="https://en.wikipedia.org/wiki/Andrew_Ng">Andrew <strong>Ng</strong></a> &#61; <strong>吳</strong>恩達</p>
</li>
</ul>
<p>所以我一直以來的認知就是 Ng 或 Ngô 就是 吳.</p>
<p>但其實</p>
<ul>
<li><p>如果你會台語或閩南語的話, 黃 這個姓氏真的是用 Ng 記號再適合不過了</p>
</li>
<li><p>&#40;逸聞趣事&#41; 在越南 <strong>黃</strong> 這個姓氏一般對應到<strong>兩個</strong>越文姓氏, 而不是一個: <strong>Hoàng</strong> 與<strong>Huỳnh</strong> 都是 黃</p>
</li>
</ul>
 ]]>
  </content:encoded>
    
  <pubDate>Fri, 09 Jun 2023 00:00:00 +0000</pubDate>  
  
  
  <atom:author>
    <atom:name>Septimia Zenobia</atom:name>
  </atom:author>
        
</item>

<item>
  <title>
    <![CDATA[  比利時的科學家  ]]>
  </title>
  <link> https://phunc20.github.io/culture/be/scientists/index.html </link>
  <guid> https://phunc20.github.io/culture/be/scientists/index.html </guid>
  <description>
    <![CDATA[  一些我最近讀的文章的作者剛好都是比利時人  ]]>
  </description>  
  
  <content:encoded>
    <![CDATA[  <h1 id="比利時的科學家">比利時的科學家</h1>
<p>最近 &#40;2022/04&#41; 在工作上或私下閱讀時, 讀到很多文章的作者剛好都是比利時人, 覺得很有趣, 特此記錄一下:</p>
<ol>
<li><p><a href="https://nielsrogge.github.io/about/">Niels Rogge</a>: 我之所以知道這個人, 是因爲 2021 年的下半年 我開始對 HuggingFace 有興趣, 而 Niels Rogge 寫了很多關於如何使用各類 transformer 模型的 Juypter notebooks – <a href="https://github.com/NielsRogge/Transformers-Tutorials">https://github.com/NielsRogge/Transformers-Tutorials</a></p>
</li>
<li><p><a href="http://www.seas.ucla.edu/~vandenbe/">Lieven Vandenberghe</a>: 事實上, 我第一次瞥見 Lieven Vandenberghe 這個名字是在很久很久以前, 當我知道有本著名的書叫做 <em>Convex Optimization</em> 的時候. &#91;該書的另一個共同作者是 <a href="https://web.stanford.edu/~boyd/">Stephen Boyd</a>&#93;</p>
<p>到了 2022 年 4 月才是我第一次單獨注意到 Lieven Vandenberghe, 主要的原因是我當時在網路上尋找關於 subgradient 的書和講義.</p>
<p>值得附帶一提的是, 上面提到的 Niels Rogge 和這裏的 Lieven Vandenberghe 都是 Katholieke Universiteit Leuven &#40;KU Leuven&#41; 的校友. 應該是間很好的學校, 臺灣的讀者如果有考慮去歐洲 留學的話, 或許可以參考看看.</p>
</li>
<li><p>Ingrid Daubechies: 如果讀者有聽過 wavelet theory, 那大概一定知道這位女性科學家.</p>
</li>
<li><p><a href="https://www.ljll.math.upmc.fr/smets/">Didier Smets</a>: 我想可能沒有很多讀者知道這號人物. 其實 Didier Smets 是我在巴黎六大留學時 <a href="https://www.ljll.math.upmc.fr/smets/MM005/index.html">泛函分析</a> 的教授, 同時也是我在六大最喜歡的教授之一. 他有分享許多自己 <a href="https://www.ljll.math.upmc.fr/smets/notes_de_cours.html">備課的講義</a> 和 <a href="https://www.ljll.math.upmc.fr/smets/publications.html">著作的 paper</a>, 我覺得都相當值得一讀.</p>
</li>
<li><p><a href="https://www.ias.edu/math/people/faculty/deligne">Pierre Deligne</a>: Fields/Wolf/Abel 獎得主. 不過其實我沒讀過他的著作. 將來有時間再接觸.</p>
</li>
<li><p>Yurii Nesterov: 這個名字學過 optimization 或 deep learning 的人或許都聽聞過 &#40;e.g. Nesterov Accelerated Gradient&#41;. 跟 Lieven Vandenberghe 一樣, Nesterov 是在 optimization 領域有名聲的學者. 但嚴格來說 Nesterov 不是比利時人, 而是俄國人, 但是他任教於 Université catholique de Louvain &#40;UCLouvain&#41;, 而且也有比利時公民身份, 和比利時的淵源似乎不淺.</p>
<p>其實這裏有個有趣的問題可以問問比利時的朋友: &quot;UCLouvain 和 KU Leuven 到底是什麼關係?&quot;</p>
</li>
<li><p><a href="https://math.mit.edu/~goemans/index.html">Michel Goemans</a>: 我無意間在網路上讀 bipartite matching 時發現的一位教授. 感覺也是一位很好的教授, 有分享許多教學和研究的資源&#40;e.g. <a href="https://math.mit.edu/~goemans/teaching.html">https://math.mit.edu/~goemans/teaching.html</a>&#41;</p>
</li>
</ol>
 ]]>
  </content:encoded>
    
  <pubDate>Fri, 31 Dec 2021 00:00:00 +0000</pubDate>  
  
  
  <atom:author>
    <atom:name>Septimia Zenobia</atom:name>
  </atom:author>
        
</item>

<item>
  <title>
    <![CDATA[  More goodies  ]]>
  </title>
  <link> https://phunc20.github.io/menu2/index.html </link>
  <guid> https://phunc20.github.io/menu2/index.html </guid>
  <description>
    <![CDATA[  A short description of the page which would serve as <strong>blurb</strong> in a <code>RSS</code> feed; you can use basic markdown here but the whole description string must be a single line &#40;not a multiline string&#41;. Like this one for instance. Keep in mind that styling is minimal in RSS so for instance don&#39;t expect maths or fancy styling to work; images should be ok though: <img src="https://upload.wikimedia.org/wikipedia/en/b/b0/Rick_and_Morty_characters.jpg" alt="" />  ]]>
  </description>  
  
  <content:encoded>
    <![CDATA[  <h1 id="more_goodies">More goodies</h1>
<div class="franklin-toc"><ol><li>More markdown support</li><li>A bit more highlighting</li><li>More customisation<ol><li>Custom &quot;hfun&quot;</li><li>Custom &quot;lx&quot;</li></ol></li></ol></div>
<h2 id="more_markdown_support">More markdown support</h2>
<p>The Julia Markdown parser in Julia&#39;s stdlib is not exactly complete and Franklin strives to bring useful extensions that are either defined in standard specs such as Common Mark or that just seem like useful extensions.</p>
<ul>
<li><p>indirect references for instance <a href="http://existentialcomics.com/">like so</a></p>
</li>
</ul>
<p> or also for images</p>
<p><img src="https://upload.wikimedia.org/wikipedia/commons/9/90/Krul.svg" alt="some image"></p>
<p>some people find that useful as it allows referring multiple times to the same link for instance.</p><ul>
<li><p>un-qualified code blocks are allowed and are julia by default, indented code blocks are not supported by default &#40;and there support will disappear completely in later version&#41;</p>
</li>
</ul>
<pre><code class="language-julia">a &#61; 1
b &#61; a&#43;1</code></pre>
<p>you can specify the default language with <code>@def lang &#61; &quot;julia&quot;</code>. If you actually want a &quot;plain&quot; code block, qualify it as <code>plaintext</code> like</p>
<pre><code class="language-plaintext">so this is plain-text stuff.</code></pre>
<h2 id="a_bit_more_highlighting">A bit more highlighting</h2>
<p>Extension of highlighting for <code>pkg</code> an <code>shell</code> mode in Julia:</p>
<pre><code class="language-julia-repl">&#40;v1.4&#41; pkg&gt; add Franklin
shell&gt; blah
julia&gt; 1&#43;1
&#40;Sandbox&#41; pkg&gt; resolve</code></pre>
<p>you can tune the colouring in the CSS etc via the following classes:</p>
<ul>
<li><p><code>.hljs-meta</code> &#40;for <code>julia&gt;</code>&#41;</p>
</li>
<li><p><code>.hljs-metas</code> &#40;for <code>shell&gt;</code>&#41;</p>
</li>
<li><p><code>.hljs-metap</code> &#40;for <code>...pkg&gt;</code>&#41;</p>
</li>
</ul>
<h2 id="more_customisation">More customisation</h2>
<p>Franklin, by design, gives you a lot of flexibility to define how you want stuff be done, this includes doing your own parsing/processing and your own HTML generation using Julia code.</p>
<p>In order to do this, you can define two types of functions in a <code>utils.jl</code> file which will complement your <code>config.md</code> file:</p>
<ul>
<li><p><code>hfun_*</code> allow you to plug custom-generated HTML somewhere</p>
</li>
<li><p><code>lx_*</code> allow you to do custom parsing of markdown and generation of HTML</p>
</li>
</ul>
<p>The former &#40;<code>hfun_*</code>&#41; is most likely to be useful.</p>
<h3 id="custom_hfun">Custom &quot;hfun&quot;</h3>
<p>If you define a function <code>hfun_bar</code> in the <code>utils.jl</code> then you have access to a new template function <code>&#123;&#123;bar ...&#125;&#125;</code>. The parameters are passed as a list of strings, for instance variable names but it  could just be strings as well.</p>
<p>For instance:</p>
<pre><code class="language-julia">function hfun_bar&#40;vname&#41;
  val &#61; Meta.parse&#40;vname&#91;1&#93;&#41;
  return round&#40;sqrt&#40;val&#41;, digits&#61;2&#41;
end</code></pre>.hf {background-color:black;color:white;font-weight:bold;}<p>Can be called with <code>&#123;&#123;bar 4&#125;&#125;</code>: <strong>2.0</strong>.</p>
<p>Usually you will want to pass variable name &#40;either local or global&#41; and collect their value via one of <code>locvar</code>, <code>globvar</code> or <code>pagevar</code> depending on your use case. Let&#39;s have another toy example:</p>
<pre><code class="language-julia">function hfun_m1fill&#40;vname&#41;
  var &#61; vname&#91;1&#93;
  return pagevar&#40;&quot;menu1&quot;, var&#41;
end</code></pre>
<p>Which you can use like this <code>&#123;&#123;m1fill title&#125;&#125;</code>: <strong>nothing</strong>. Of course  in this specific case you could also have used <code>&#123;&#123;fill title menu1&#125;&#125;</code>: <strong>Code blocks</strong>.</p>
<p>Of course these examples are not very useful, in practice you might want to use it to generate actual HTML in a specific way using Julia code. For instance you can use it to customise how <a href="https://phunc20.github.io/menu3/#customising_tag_pages">tag pages look like</a>.</p>
<p>A nice example of what you can do is in the <a href="https://juliasymbolics.github.io/SymbolicUtils.jl/api/">SymbolicUtils.jl manual</a> where they use a <code>hfun_</code> to generate HTML encapsulating the content of code docstrings, in a way doing something similar to what Documenter does. See <a href="https://github.com/JuliaSymbolics/SymbolicUtils.jl/blob/website/utils.jl">how they defined it</a>.</p>
<p><strong>Note</strong>: the  output <strong>will not</strong> be reprocessed by Franklin, if you want to generate markdown which should be processed by Franklin, then use <code>return fd2html&#40;markdown, internal&#61;true&#41;</code> at the end.</p>
<h3 id="custom_lx">Custom &quot;lx&quot;</h3>
<p>These commands will look the same as latex commands but what they do with their content is now entirely controlled by your code. You can use this to do your own parsing of specific chunks of your content if you so desire.</p>
<p>The definition of <code>lx_*</code> commands <strong>must</strong> look like this:</p>
<pre><code class="language-julia">function lx_baz&#40;com, _&#41;
  # keep this first line
  brace_content &#61; Franklin.content&#40;com.braces&#91;1&#93;&#41; # input string
  # do whatever you want here
  return uppercase&#40;brace_content&#41;
end</code></pre>
<p>You can call the above with <code>\baz&#123;some string&#125;</code>: SOME STRING.</p>
<p><strong>Note</strong>: the output <strong>will be</strong> reprocessed by Franklin, if you want to avoid this, then escape the output by using <code>return &quot;~~~&quot; * s * &quot;~~~&quot;</code> and it will be plugged  in as is in the HTML.</p>
 ]]>
  </content:encoded>
    
  <pubDate>Wed, 01 May 2019 00:00:00 +0000</pubDate>  
  
  
  <atom:author>
    <atom:name>Septimia Zenobia</atom:name>
  </atom:author>
        
</item>

<item>
  <title>
    <![CDATA[  Code blocks  ]]>
  </title>
  <link> https://phunc20.github.io/menu1/index.html </link>
  <guid> https://phunc20.github.io/menu1/index.html </guid>
  <description>
    <![CDATA[  A short description of the page which would serve as <strong>blurb</strong> in a <code>RSS</code> feed; you can use basic markdown here but the whole description string must be a single line &#40;not a multiline string&#41;. Like this one for instance. Keep in mind that styling is minimal in RSS so for instance don&#39;t expect maths or fancy styling to work; images should be ok though: <img src="https://upload.wikimedia.org/wikipedia/en/3/32/Rick_and_Morty_opening_credits.jpeg" alt="" />  ]]>
  </description>  
  
  <content:encoded>
    <![CDATA[  
<h1 id="working_with_code_blocks">Working with code blocks</h1>
<div class="franklin-toc"><ol><li>Live evaluation of code blocks</li><li>Including scripts</li></ol></div>
<h2 id="live_evaluation_of_code_blocks">Live evaluation of code blocks</h2>
<p>If you would like to show code as well as what the code outputs, you only need to specify where the script corresponding to the code block will be saved.</p>
<p>Indeed, what happens is that the code block gets saved as a script which then gets executed. This also allows for that block to not be re-executed every time you change something <em>else</em> on the page.</p>
<p>Here&#39;s a simple example &#40;change values in <code>a</code> to see the results being live updated&#41;:</p>
<pre><code class="language-julia">using LinearAlgebra
a &#61; &#91;1, 2, 3, 3, 4, 5, 2, 2&#93;
@show dot&#40;a, a&#41;
println&#40;dot&#40;a, a&#41;&#41;</code></pre>
<p>You can now show what this would look like:</p>
<pre><code class="plaintext code-output">dot(a, a) = 72
72
</code></pre>
<p><strong>Notes</strong>:</p>
<ul>
<li><p>you don&#39;t have to specify the <code>.jl</code> &#40;see below&#41;,</p>
</li>
<li><p>you do need to explicitly use print statements or <code>@show</code> for things to show, so just leaving a variable at the end like you would in the REPL will show nothing,</p>
</li>
<li><p>only Julia code blocks are supported at the moment, there may be a support for scripting languages like <code>R</code> or <code>python</code> in the future,</p>
</li>
<li><p>the way you specify the path is important; see <a href="https://tlienart.github.io/franklindocs/code/index.html#more_on_paths">the docs</a> for more info. If you don&#39;t care about how things are structured in your <code>/assets/</code> folder, just use <code>./scriptname.jl</code>. If you want things to be grouped, use <code>./group/scriptname.jl</code>. For more involved uses, see the docs.</p>
</li>
</ul>
<p>Lastly, it&#39;s important to realise that if you don&#39;t change the content of the code, then that code will only be executed <em>once</em> even if you make multiple changes to the text around it.</p>
<p>Here&#39;s another example,</p>
<pre><code class="language-julia">for i ∈ 1:5, j ∈ 1:5
    print&#40;&quot; &quot;, rpad&#40;&quot;*&quot;^i,5&#41;, lpad&#40;&quot;*&quot;^&#40;6-i&#41;,5&#41;, j&#61;&#61;5 ? &quot;\n&quot; : &quot; &quot;^4&#41;
end</code></pre>
<p>which gives the &#40;utterly useless&#41;:</p>
<pre><code class="plaintext code-output"> *    *****     *    *****     *    *****     *    *****     *    *****
 **    ****     **    ****     **    ****     **    ****     **    ****
 ***    ***     ***    ***     ***    ***     ***    ***     ***    ***
 ****    **     ****    **     ****    **     ****    **     ****    **
 *****    *     *****    *     *****    *     *****    *     *****    *
</code></pre>
<p>note the absence of <code>.jl</code>, it&#39;s inferred.</p>
<p>You can also hide lines &#40;that will be executed nonetheless&#41;:</p>
<pre><code class="language-julia">using Random
@show randn&#40;2&#41;</code></pre>
<pre><code class="plaintext code-output">randn(2) = [0.2972879845354616, 0.3823959677906078]
</code></pre>
<h2 id="including_scripts">Including scripts</h2>
<p>Another approach is to include the content of a script that has already been executed. This can be an alternative to the description above if you&#39;d like to only run the code once because it&#39;s particularly slow or because it&#39;s not Julia code. For this you can use the <code>\input</code> command specifying which language it should be tagged as:</p>
<p><pre><code class="language-julia">x &#61; randn&#40;5&#41;
y &#61; randn&#40;5&#41;for i in 1:5
    println&#40;rpad&#40;&quot;*&quot;^i, 10, &#39;-&#39;&#41;, round&#40;dot&#40;x, y&#41;, digits&#61;1&#41;&#41;
end</code></pre> </p>
<p>these scripts can be run in such a way that their output is also saved to file, see <code>scripts/generate_results.jl</code> for instance, and you can then also input the results:</p>
<p><pre><code class="plaintext code-output">*---------1.3
**--------1.3
***-------1.3
****------1.3
*****-----1.3
</code></pre> </p>
<p>which is convenient if you&#39;re presenting code.</p>
<p><strong>Note</strong>: paths specification matters, see <a href="https://tlienart.github.io/franklindocs/code/index.html#more_on_paths">the docs</a> for details.</p>
<p>Using this approach with the <code>generate_results.jl</code> file also makes sure that all the code on your website works and that all results match the code which makes maintenance easier.</p>
 ]]>
  </content:encoded>
    
  <pubDate>Fri, 22 Mar 2019 00:00:00 +0000</pubDate>  
  
  
  <atom:author>
    <atom:name>Septimia Zenobia</atom:name>
  </atom:author>
        
</item>
</channel></rss>